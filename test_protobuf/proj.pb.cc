// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proj.proto

#include "proj.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class Loading_MsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Loading_Msg> _instance;
} _Loading_Msg_default_instance_;
static void InitDefaultsscc_info_Loading_Msg_proj_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Loading_Msg_default_instance_;
    new (ptr) ::Loading_Msg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Loading_Msg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Loading_Msg_proj_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Loading_Msg_proj_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proj_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proj_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proj_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proj_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Loading_Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Loading_Msg, cpu_load_),
  PROTOBUF_FIELD_OFFSET(::Loading_Msg, bpu_load_),
  PROTOBUF_FIELD_OFFSET(::Loading_Msg, mem_load_),
  PROTOBUF_FIELD_OFFSET(::Loading_Msg, gpu_load_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Loading_Msg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Loading_Msg_default_instance_),
};

const char descriptor_table_protodef_proj_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nproj.proto\"U\n\013Loading_Msg\022\020\n\010cpu_load\030"
  "\001 \001(\002\022\020\n\010bpu_load\030\002 \001(\002\022\020\n\010mem_load\030\003 \001("
  "\002\022\020\n\010gpu_load\030\004 \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proj_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proj_2eproto_sccs[1] = {
  &scc_info_Loading_Msg_proj_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proj_2eproto_once;
static bool descriptor_table_proj_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proj_2eproto = {
  &descriptor_table_proj_2eproto_initialized, descriptor_table_protodef_proj_2eproto, "proj.proto", 107,
  &descriptor_table_proj_2eproto_once, descriptor_table_proj_2eproto_sccs, descriptor_table_proj_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_proj_2eproto::offsets,
  file_level_metadata_proj_2eproto, 1, file_level_enum_descriptors_proj_2eproto, file_level_service_descriptors_proj_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proj_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proj_2eproto), true);

// ===================================================================

void Loading_Msg::InitAsDefaultInstance() {
}
class Loading_Msg::_Internal {
 public:
};

Loading_Msg::Loading_Msg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Loading_Msg)
}
Loading_Msg::Loading_Msg(const Loading_Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cpu_load_, &from.cpu_load_,
    static_cast<size_t>(reinterpret_cast<char*>(&gpu_load_) -
    reinterpret_cast<char*>(&cpu_load_)) + sizeof(gpu_load_));
  // @@protoc_insertion_point(copy_constructor:Loading_Msg)
}

void Loading_Msg::SharedCtor() {
  ::memset(&cpu_load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpu_load_) -
      reinterpret_cast<char*>(&cpu_load_)) + sizeof(gpu_load_));
}

Loading_Msg::~Loading_Msg() {
  // @@protoc_insertion_point(destructor:Loading_Msg)
  SharedDtor();
}

void Loading_Msg::SharedDtor() {
}

void Loading_Msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Loading_Msg& Loading_Msg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Loading_Msg_proj_2eproto.base);
  return *internal_default_instance();
}


void Loading_Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:Loading_Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cpu_load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpu_load_) -
      reinterpret_cast<char*>(&cpu_load_)) + sizeof(gpu_load_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Loading_Msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float cpu_load = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          cpu_load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bpu_load = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          bpu_load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mem_load = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          mem_load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gpu_load = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          gpu_load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Loading_Msg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Loading_Msg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float cpu_load = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float bpu_load = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bpu_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float mem_load = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mem_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gpu_load = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpu_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Loading_Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Loading_Msg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Loading_Msg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Loading_Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float cpu_load = 1;
  if (!(this->cpu_load() <= 0 && this->cpu_load() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->cpu_load(), output);
  }

  // float bpu_load = 2;
  if (!(this->bpu_load() <= 0 && this->bpu_load() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->bpu_load(), output);
  }

  // float mem_load = 3;
  if (!(this->mem_load() <= 0 && this->mem_load() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->mem_load(), output);
  }

  // float gpu_load = 4;
  if (!(this->gpu_load() <= 0 && this->gpu_load() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->gpu_load(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Loading_Msg)
}

::PROTOBUF_NAMESPACE_ID::uint8* Loading_Msg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Loading_Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float cpu_load = 1;
  if (!(this->cpu_load() <= 0 && this->cpu_load() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->cpu_load(), target);
  }

  // float bpu_load = 2;
  if (!(this->bpu_load() <= 0 && this->bpu_load() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->bpu_load(), target);
  }

  // float mem_load = 3;
  if (!(this->mem_load() <= 0 && this->mem_load() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->mem_load(), target);
  }

  // float gpu_load = 4;
  if (!(this->gpu_load() <= 0 && this->gpu_load() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->gpu_load(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Loading_Msg)
  return target;
}

size_t Loading_Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Loading_Msg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float cpu_load = 1;
  if (!(this->cpu_load() <= 0 && this->cpu_load() >= 0)) {
    total_size += 1 + 4;
  }

  // float bpu_load = 2;
  if (!(this->bpu_load() <= 0 && this->bpu_load() >= 0)) {
    total_size += 1 + 4;
  }

  // float mem_load = 3;
  if (!(this->mem_load() <= 0 && this->mem_load() >= 0)) {
    total_size += 1 + 4;
  }

  // float gpu_load = 4;
  if (!(this->gpu_load() <= 0 && this->gpu_load() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Loading_Msg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Loading_Msg)
  GOOGLE_DCHECK_NE(&from, this);
  const Loading_Msg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Loading_Msg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Loading_Msg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Loading_Msg)
    MergeFrom(*source);
  }
}

void Loading_Msg::MergeFrom(const Loading_Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Loading_Msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.cpu_load() <= 0 && from.cpu_load() >= 0)) {
    set_cpu_load(from.cpu_load());
  }
  if (!(from.bpu_load() <= 0 && from.bpu_load() >= 0)) {
    set_bpu_load(from.bpu_load());
  }
  if (!(from.mem_load() <= 0 && from.mem_load() >= 0)) {
    set_mem_load(from.mem_load());
  }
  if (!(from.gpu_load() <= 0 && from.gpu_load() >= 0)) {
    set_gpu_load(from.gpu_load());
  }
}

void Loading_Msg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Loading_Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Loading_Msg::CopyFrom(const Loading_Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Loading_Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Loading_Msg::IsInitialized() const {
  return true;
}

void Loading_Msg::InternalSwap(Loading_Msg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cpu_load_, other->cpu_load_);
  swap(bpu_load_, other->bpu_load_);
  swap(mem_load_, other->mem_load_);
  swap(gpu_load_, other->gpu_load_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Loading_Msg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Loading_Msg* Arena::CreateMaybeMessage< ::Loading_Msg >(Arena* arena) {
  return Arena::CreateInternal< ::Loading_Msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
